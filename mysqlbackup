#!/bin/bash

environment=$(echo $APPLICATION_ENV)
wd=$(dirname $0)
wd=$(realpath $wd)
suffix=$(date | sed -E 's/\s/-/g' | sed -E 's/:/-/g')
archive_filename="database_backups".$suffix.zip
timestamp=$(date +%s)

validateConfig() {
	#CA cert
	if [[ -z "$cacert" ]]; then
		echo "CA cert not set."
	    	exit 1;
	fi

	if ! [[ -f $cacert ]]; then
    		echo "CA cert '$cacert' is not a file"
    		exit 1
    	fi

	if [[ -z "$smtp_host" ]]; then
		echo "SMTP host not set."
	    	exit 1;
	fi

	if [[ -z "$smtp_port" ]]; then
		echo "SMTP port not set."
	    	exit 1;
	fi

	if [[ -z "$smtp_login_options" ]]; then
		echo "SMTP login options not set."
	    	exit 1;
	fi

	if [[ -z "$mail_from_name" ]]; then
		echo "Mail from name not set."
	    	exit 1;
	fi

	if [[ -z "$mail_from" ]]; then
		echo "Mail from email address not set."
	    	exit 1;
	fi
	
	if [[ -z "$mail_rcpt_name" ]]; then
		echo "Mail RCPT name not set."
	    	exit 1;
	fi

	if [[ -z "$mail_rcpt" ]]; then
		echo "Mail RCPT not set."
	    	exit 1;
	fi

	if [[ -z "$no_reply_email" ]]; then
		echo "No reply email address not set"
	    	exit 1;
	fi

	#MySQL Defaults file
	if [[ -z "$mysql_defaults_file" ]]; then
		echo "MySQL defaults file not set"
	    	exit 1;
	fi

	if ! test -f "$mysql_defaults_file"; then
		echo "MySQL defaults file '$mysql_defaults_file' does not exist."
		exit 1;
	fi

	if [ ${#databases[@]} -eq 0 ]; then
	    	echo "No databases set to backup."
    		exit 1;
	fi
}

echo "Working directory: $wd"
cd $wd

#does ini file exist?
if ! test -f conf.ini; then
  echo "conf.ini does not exist."
  exit 1;
fi

#read ini values
source <(grep = conf.ini)

#Validate configuration
validateConfig 

echo "Databases: ${databases[*]}"

for database in "${databases[@]}"
do
	suffix=$(date | sed -E 's/\s/-/g' | sed -E 's/:/-/g')
	out_filename=$database.$suffix.sql

	echo "Dumping $database ..."	
	mysqldump --defaults-file=$mysql_defaults_file \
				--add-drop-database \
				--dump-date \
				--events \
				--add-drop-table \
				--default-character-set=utf8 \
				--routines=true \
				--events \
				--databases $database > $out_filename
	status=$?

	if [[ $status -ne 0 ]]; then
		echo "Failed to dump database '$database'."
		exit 1
	fi

	zip -u $archive_filename $out_filename

	echo "Removing $out_filename ..."
	rm $out_filename
				
done

base64 $archive_filename > archive.base64
cat email.head.eml archive.base64 email.tail.eml > email.eml
sed -i "s/<ARCHIVE_NAME>/$archive_filename/g" email.eml
sed -i "s/<UNIX_TIMESTAMP>/$timestamp/g" email.eml
sed -i "s/<MAIL_FROM_NAME>/$mail_from_name/g" email.eml
sed -i "s/<MAIL_FROM>/$mail_from/g" email.eml
sed -i "s/<MAIL_RCPT_NAME>/$mail_rcpt_name/g" email.eml
sed -i "s/<MAIL_RCPT>/$mail_rcpt/g" email.eml
sed -i "s/<NO_REPLY_EMAIL>/$no_reply_email/g" email.eml

curl --ssl \
  --url "smtp://$smtp_host:$smtp_port" \
  --tlsv1.2 \
  --cacert $cacert \
  --login-options "$smtp_login_options" \
  --mail-from $mail_from \
  --mail-rcpt $mail_rcpt \
  --user "$mail_from:$mail_from_password" \
  --upload-file email.eml

status=$?
	
if [[ $status -ne 0 ]]; then
	echo "Failed to make CURL request."
	exit 1
fi
	
echo "Removing $archive_filename ..."
rm $archive_filename

echo "Removing archive.base64 ..."
rm archive.base64

echo "Removing email.eml ..."
rm email.eml

echo "Done!";
